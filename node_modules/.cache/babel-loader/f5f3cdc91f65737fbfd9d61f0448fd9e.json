{"ast":null,"code":"import _objectSpread from \"E:/houtai/backstage/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _classCallCheck from \"E:/houtai/backstage/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"E:/houtai/backstage/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport \"core-js/modules/es.array.fill.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/es.array.splice.js\";\n//\n//\n//\n//\n//\n//\nexport default {\n  name: \"index\",\n  methods: {\n    show: function show() {\n      var Circle = /*#__PURE__*/function () {\n        function Circle(_ref) {\n          var origin = _ref.origin,\n              speed = _ref.speed,\n              color = _ref.color,\n              angle = _ref.angle,\n              context = _ref.context;\n\n          _classCallCheck(this, Circle);\n\n          this.origin = origin;\n          this.position = _objectSpread({}, this.origin);\n          this.color = color;\n          this.speed = speed;\n          this.angle = angle;\n          this.context = context;\n          this.renderCount = 0;\n        }\n\n        _createClass(Circle, [{\n          key: \"draw\",\n          value: function draw() {\n            this.context.fillStyle = this.color;\n            this.context.beginPath();\n            this.context.arc(this.position.x, this.position.y, 2, 0, Math.PI * 2);\n            this.context.fill();\n          }\n        }, {\n          key: \"move\",\n          value: function move() {\n            this.position.x = Math.sin(this.angle) * this.speed + this.position.x;\n            this.position.y = Math.cos(this.angle) * this.speed + this.position.y + this.renderCount * 0.3;\n            this.renderCount++;\n          }\n        }]);\n\n        return Circle;\n      }();\n\n      var Boom = /*#__PURE__*/function () {\n        function Boom(_ref2) {\n          var origin = _ref2.origin,\n              context = _ref2.context,\n              _ref2$circleCount = _ref2.circleCount,\n              circleCount = _ref2$circleCount === void 0 ? 10 : _ref2$circleCount,\n              area = _ref2.area;\n\n          _classCallCheck(this, Boom);\n\n          this.origin = origin;\n          this.context = context;\n          this.circleCount = circleCount;\n          this.area = area;\n          this.stop = false;\n          this.circles = [];\n        }\n\n        _createClass(Boom, [{\n          key: \"randomArray\",\n          value: function randomArray(range) {\n            var length = range.length;\n            var randomIndex = Math.floor(length * Math.random());\n            return range[randomIndex];\n          }\n        }, {\n          key: \"randomColor\",\n          value: function randomColor() {\n            var range = ['8', '9', 'A', 'B', 'C', 'D', 'E', 'F'];\n            return '#' + this.randomArray(range) + this.randomArray(range) + this.randomArray(range) + this.randomArray(range) + this.randomArray(range) + this.randomArray(range);\n          }\n        }, {\n          key: \"randomRange\",\n          value: function randomRange(start, end) {\n            return (end - start) * Math.random() + start;\n          }\n        }, {\n          key: \"init\",\n          value: function init() {\n            for (var i = 0; i < this.circleCount; i++) {\n              var circle = new Circle({\n                context: this.context,\n                origin: this.origin,\n                color: this.randomColor(),\n                angle: this.randomRange(Math.PI - 1, Math.PI + 1),\n                speed: this.randomRange(1, 6)\n              });\n              this.circles.push(circle);\n            }\n          }\n        }, {\n          key: \"move\",\n          value: function move() {\n            var _this = this;\n\n            this.circles.forEach(function (circle, index) {\n              if (circle.position.x > _this.area.width || circle.position.y > _this.area.height) {\n                return _this.circles.splice(index, 1);\n              }\n\n              circle.move();\n            });\n\n            if (this.circles.length == 0) {\n              this.stop = true;\n            }\n          }\n        }, {\n          key: \"draw\",\n          value: function draw() {\n            this.circles.forEach(function (circle) {\n              return circle.draw();\n            });\n          }\n        }]);\n\n        return Boom;\n      }();\n\n      var CursorSpecialEffects = /*#__PURE__*/function () {\n        function CursorSpecialEffects() {\n          _classCallCheck(this, CursorSpecialEffects);\n\n          this.computerCanvas = document.createElement('canvas');\n          this.renderCanvas = document.createElement('canvas');\n          this.computerContext = this.computerCanvas.getContext('2d');\n          this.renderContext = this.renderCanvas.getContext('2d');\n          this.globalWidth = window.innerWidth;\n          this.globalHeight = window.innerHeight;\n          this.booms = [];\n          this.running = false;\n        }\n\n        _createClass(CursorSpecialEffects, [{\n          key: \"handleMouseDown\",\n          value: function handleMouseDown(e) {\n            var boom = new Boom({\n              origin: {\n                x: e.clientX,\n                y: e.clientY\n              },\n              context: this.computerContext,\n              area: {\n                width: this.globalWidth,\n                height: this.globalHeight\n              }\n            });\n            boom.init();\n            this.booms.push(boom);\n            this.running || this.run();\n          }\n        }, {\n          key: \"handlePageHide\",\n          value: function handlePageHide() {\n            this.booms = [];\n            this.running = false;\n          }\n        }, {\n          key: \"init\",\n          value: function init() {\n            var style = this.renderCanvas.style;\n            style.position = 'fixed';\n            style.top = style.left = 0;\n            style.zIndex = '999999999999999999999999999999999999999999';\n            style.pointerEvents = 'none';\n            style.width = this.renderCanvas.width = this.computerCanvas.width = this.globalWidth;\n            style.height = this.renderCanvas.height = this.computerCanvas.height = this.globalHeight;\n            document.body.append(this.renderCanvas);\n            window.addEventListener('mousedown', this.handleMouseDown.bind(this));\n            window.addEventListener('pagehide', this.handlePageHide.bind(this));\n          }\n        }, {\n          key: \"run\",\n          value: function run() {\n            var _this2 = this;\n\n            this.running = true;\n\n            if (this.booms.length == 0) {\n              return this.running = false;\n            }\n\n            requestAnimationFrame(this.run.bind(this));\n            this.computerContext.clearRect(0, 0, this.globalWidth, this.globalHeight);\n            this.renderContext.clearRect(0, 0, this.globalWidth, this.globalHeight);\n            this.booms.forEach(function (boom, index) {\n              if (boom.stop) {\n                return _this2.booms.splice(index, 1);\n              }\n\n              boom.move();\n              boom.draw();\n            });\n            this.renderContext.drawImage(this.computerCanvas, 0, 0, this.globalWidth, this.globalHeight);\n          }\n        }]);\n\n        return CursorSpecialEffects;\n      }();\n\n      var cursorSpecialEffects = new CursorSpecialEffects();\n      cursorSpecialEffects.init();\n    }\n  },\n  mounted: function mounted() {\n    this.show();\n  }\n};","map":{"version":3,"mappings":";;;;;;;;;;;;;AAOA;EACAA,aADA;EAEAC;IACAC,IADA,kBACA;MAAA,IACAC,MADA;QAEA;UAAA;UAAA;UAAA;UAAA;UAAA;;UAAA;;UACA;UACA;UACA;UACA;UACA;UACA;UACA;QACA;;QAVA;UAAA;UAAA,OAYA;YACA;YACA;YACA;YACA;UACA;QAjBA;UAAA;UAAA,OAmBA;YACA;YACA;YACA;UACA;QAvBA;;QAAA;MAAA;;MAAA,IA0BAC,IA1BA;QA2BA;UAAA;UAAA;UAAA;UAAA;UAAA;;UAAA;;UACA;UACA;UACA;UACA;UACA;UACA;QACA;;QAlCA;UAAA;UAAA,OAoCA;YACA;YACA;YACA;UACA;QAxCA;UAAA;UAAA,OA0CA;YACA;YACA;UACA;QA7CA;UAAA;UAAA,OA+CA;YACA;UACA;QAjDA;UAAA;UAAA,OAmDA;YACA;cACA;gBACAC,qBADA;gBAEAC,mBAFA;gBAGAC,yBAHA;gBAIAC,iDAJA;gBAKAC;cALA;cAOA;YACA;UACA;QA9DA;UAAA;UAAA,OAgEA;YAAA;;YACA;cACA;gBACA;cACA;;cACAC;YACA,CALA;;YAMA;cACA;YACA;UACA;QA1EA;UAAA;UAAA,OA4EA;YACA;cAAA;YAAA;UACA;QA9EA;;QAAA;MAAA;;MAAA,IAiFAC,oBAjFA;QAkFA;UAAA;;UACA;UACA;UAEA;UACA;UAEA;UACA;UAEA;UACA;QACA;;QA9FA;UAAA;UAAA,OAgGA;YACA;cACAL;gBAAAM;gBAAAC;cAAA,CADA;cAEAR,6BAFA;cAGAS;gBACAC,uBADA;gBAEAC;cAFA;YAHA;YAQAC;YACA;YACA;UACA;QA5GA;UAAA;UAAA,OA8GA;YACA;YACA;UACA;QAjHA;UAAA;UAAA,OAmHA;YACA;YACAC;YACAA;YACAA;YACAA;YAEAA;YACAA;YAEAC;YAEAC;YACAA;UACA;QAjIA;UAAA;UAAA,OAmIA;YAAA;;YACA;;YACA;cACA;YACA;;YAEAC;YAEA;YACA;YAEA;cACA;gBACA;cACA;;cACAJ;cACAA;YACA,CANA;YAOA;UACA;QAtJA;;QAAA;MAAA;;MAyJA;MACAK;IACA;EA5JA,CAFA;EAgKAC,OAhKA,qBAgKA;IACA;EACA;AAlKA","names":["name","methods","show","Circle","Boom","context","origin","color","angle","speed","circle","CursorSpecialEffects","x","y","area","width","height","boom","style","document","window","requestAnimationFrame","cursorSpecialEffects","mounted"],"sourceRoot":"src/components","sources":["ttf_8.vue"],"sourcesContent":["<template>\n  <div>\n    <!-- <h3>点击烟花爆炸</h3> -->\n  </div>\n</template>\n\n<script>\nexport default {\n  name: \"index\",\n  methods:{\n    show(){\n      class Circle {\n        constructor({ origin, speed, color, angle, context }) {\n          this.origin = origin\n          this.position = { ...this.origin }\n          this.color = color\n          this.speed = speed\n          this.angle = angle\n          this.context = context\n          this.renderCount = 0\n        }\n\n        draw() {\n          this.context.fillStyle = this.color\n          this.context.beginPath()\n          this.context.arc(this.position.x, this.position.y, 2, 0, Math.PI * 2)\n          this.context.fill()\n        }\n\n        move() {\n          this.position.x = (Math.sin(this.angle) * this.speed) + this.position.x\n          this.position.y = (Math.cos(this.angle) * this.speed) + this.position.y + (this.renderCount * 0.3)\n          this.renderCount++\n        }\n      }\n\n      class Boom {\n        constructor({ origin, context, circleCount = 10, area }) {\n          this.origin = origin\n          this.context = context\n          this.circleCount = circleCount\n          this.area = area\n          this.stop = false\n          this.circles = []\n        }\n\n        randomArray(range) {\n          const length = range.length\n          const randomIndex = Math.floor(length * Math.random())\n          return range[randomIndex]\n        }\n\n        randomColor() {\n          const range = ['8', '9', 'A', 'B', 'C', 'D', 'E', 'F']\n          return '#' + this.randomArray(range) + this.randomArray(range) + this.randomArray(range) + this.randomArray(range) + this.randomArray(range) + this.randomArray(range)\n        }\n\n        randomRange(start, end) {\n          return (end - start) * Math.random() + start\n        }\n\n        init() {\n          for (let i = 0; i < this.circleCount; i++) {\n            const circle = new Circle({\n              context: this.context,\n              origin: this.origin,\n              color: this.randomColor(),\n              angle: this.randomRange(Math.PI - 1, Math.PI + 1),\n              speed: this.randomRange(1, 6)\n            })\n            this.circles.push(circle)\n          }\n        }\n\n        move() {\n          this.circles.forEach((circle, index) => {\n            if (circle.position.x > this.area.width || circle.position.y > this.area.height) {\n              return this.circles.splice(index, 1)\n            }\n            circle.move()\n          })\n          if (this.circles.length == 0) {\n            this.stop = true\n          }\n        }\n\n        draw() {\n          this.circles.forEach(circle => circle.draw())\n        }\n      }\n\n      class CursorSpecialEffects {\n        constructor() {\n          this.computerCanvas = document.createElement('canvas')\n          this.renderCanvas = document.createElement('canvas')\n\n          this.computerContext = this.computerCanvas.getContext('2d')\n          this.renderContext = this.renderCanvas.getContext('2d')\n\n          this.globalWidth = window.innerWidth\n          this.globalHeight = window.innerHeight\n\n          this.booms = []\n          this.running = false\n        }\n\n        handleMouseDown(e) {\n          const boom = new Boom({\n            origin: { x: e.clientX, y: e.clientY },\n            context: this.computerContext,\n            area: {\n              width: this.globalWidth,\n              height: this.globalHeight\n            }\n          })\n          boom.init()\n          this.booms.push(boom)\n          this.running || this.run()\n        }\n\n        handlePageHide() {\n          this.booms = []\n          this.running = false\n        }\n\n        init() {\n          const style = this.renderCanvas.style\n          style.position = 'fixed'\n          style.top = style.left = 0\n          style.zIndex = '999999999999999999999999999999999999999999'\n          style.pointerEvents = 'none'\n\n          style.width = this.renderCanvas.width = this.computerCanvas.width = this.globalWidth\n          style.height = this.renderCanvas.height = this.computerCanvas.height = this.globalHeight\n\n          document.body.append(this.renderCanvas)\n\n          window.addEventListener('mousedown', this.handleMouseDown.bind(this))\n          window.addEventListener('pagehide', this.handlePageHide.bind(this))\n        }\n\n        run() {\n          this.running = true\n          if (this.booms.length == 0) {\n            return this.running = false\n          }\n\n          requestAnimationFrame(this.run.bind(this))\n\n          this.computerContext.clearRect(0, 0, this.globalWidth, this.globalHeight)\n          this.renderContext.clearRect(0, 0, this.globalWidth, this.globalHeight)\n\n          this.booms.forEach((boom, index) => {\n            if (boom.stop) {\n              return this.booms.splice(index, 1)\n            }\n            boom.move()\n            boom.draw()\n          })\n          this.renderContext.drawImage(this.computerCanvas, 0, 0, this.globalWidth, this.globalHeight)\n        }\n      }\n\n      const cursorSpecialEffects = new CursorSpecialEffects()\n      cursorSpecialEffects.init()\n    }\n  },\n  mounted() {\n    this.show()\n  }\n}\n</script>\n\n<style scoped>\n\n</style>\n"]},"metadata":{},"sourceType":"module"}